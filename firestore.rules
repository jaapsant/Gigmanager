rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }

    function isUpdatingOwnAvailability(gigData) {
      let diff = request.resource.data.diff(resource.data);
      let availabilityChanges = diff.affectedKeys().hasOnly(['memberAvailability']);
      let memberChanges = request.resource.data.memberAvailability.diff(resource.data.memberAvailability).affectedKeys();
      return availabilityChanges && memberChanges.hasOnly([request.auth.uid]);
    }

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.admin == true;
    }

    function isBandManager() {
      return request.auth != null && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.bandManager == true;
    }

    function isAdminOrBandManager() {
      return isAdmin() || isBandManager();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }

    // Band members collection
    match /bandMembers/{memberId} {
      allow read: if isAuthenticated();
      allow create: if isEmailVerified();
      allow update: if isEmailVerified() && (
        request.auth.uid == memberId || 
        request.auth.uid == resource.data.createdBy
      );
      allow delete: if isEmailVerified() && request.auth.uid != memberId;
    }

    // Instruments collection
    match /instruments/{instrumentId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrBandManager();
      allow update: if isAdminOrBandManager();
      allow delete: if isAdminOrBandManager();
    }

    // Gigs collection
    match /gigs/{gigId} {
      allow read: if isAuthenticated();
      allow create: if isEmailVerified();
      allow update: if isEmailVerified() && (
        resource.data.createdBy == request.auth.uid || 
        isUpdatingOwnAvailability(resource.data)
      );
      allow delete: if isEmailVerified() && resource.data.createdBy == request.auth.uid;
    }

    // Roles collection
    match /roles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.admin == true;
    }
  }
}